{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["Component","Boolean","window","location","hostname","match","FormInp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","handleSubmit","submitstatus","event","setState","target","nicknames","colors","colorrandomnumber","Math","floor","random","length","textcolor","color","nickrandomnumber","days","dayrandomnumber","crushnames","crushnamerandomnumber","marryin","marryinrandomnumber","crushno","crushnorandomnumber","crushpercen","crushpercenrandomnumber","react_default","a","createElement","class","scope","style","onSubmit","type","onChange","required","React","ReactDOM","render","src_FormInp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.df211eb5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nclass FormInp extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {value:''};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.state = {submitstatus:false};\n\n    }\n\n    handleChange(event)\n    {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event)\n    {\n        this.setState({submitstatus:true});\n    }\n\n    render()\n    {\n        const submitstatus = this.state.submitstatus;\n        if(!submitstatus){\n\n        \n        return(\n            \n            <div>\n                <h6>Enter your name:</h6>\n                <form onSubmit={this.handleSubmit}>\n                <input type='text' value={this.state.value} onChange = {this.handleChange} required/>\n                <button type='submit'>Submit</button>\n                </form>\n            </div>\n        );\n        }\n        else{\n            const nicknames = [\"Bestie\",\"Darling\",\"Honey\",\"PlayBoy\",\"Mama\",\"Lion\",\"Boss\",\"Mad\",\"Handsome\",\"Sexy\",\"Champ\",\"Chintu\",\"Bava\",\"Tiger\",\"Barbie Girl\",\"Bat Man\",\"Robo\",\"True Lover\",\"Faltose\",\"Doberman\",\"Best Kisser\",\"Topper\",\"Amul Baby\",\"Ghost\",\"Devil\",\"Genius\",\"Sound Engineer\",\"Pig\",\"Fat\",\"IPhone Lover\",\"Foodie\",\"Black Sheep\",\"Bobbili Puli\",\"Sharp\",\"Dare Devil\",\"Fruit\",\"Terminator\",\"Hulk\",\"BFF\",\"PhD in Flirting\",\"Chatter Box\",\"Gangster\",\"Panda\",\"Crazy Bird\",\"BrokenUp Bottle\",\"Big Bro\",\"Self Motivated\",\"Ice Cream Lover\"];\n            const colors = [\"Black\",\"Blue\",\"Yellow\",\"Red\",\"White\",\"Green\",\"Pink\",\"Orange\",\"Green\"];\n            var colorrandomnumber = Math.floor((Math.random() * colors.length-1) + 1);\n            const textcolor = {\n                color:colors[colorrandomnumber]\n            }\n    \n            var nickrandomnumber = Math.floor((Math.random() * nicknames.length - 1) + 1);\n\n            const days = [\"Every Day is Lucky for you\",\"Sunday\",\"Monday\",\"Tueday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Every day is lucky for you.. Can Propose today.. Haha\",\"Today\"];\n            var dayrandomnumber = Math.floor((Math.random() * days.length-1) + 1);\n\n            const crushnames = [\"A\",\"B\",\"D\",\"G\",\"H\",\"J\",\"K\",\"L\",\"M\",\"N\",\"P\",\"R\",\"S\",\"T\",\"V\",\"Y\"];\n            var crushnamerandomnumber = Math.floor((Math.random() * crushnames.length-1) + 1);\n\n            const marryin = [\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2040\",\"2035\",\"2028\",\"2036\",\"You are already married in Dreams\",\"2060\"]\n            var marryinrandomnumber = Math.floor((Math.random() * marryin.length-1) + 1);\n\n            const crushno = [\"1... May be it was the True Love... \",\"2.... Stay calm, and Stay Clam... \",\"3... Make a good choice\",\"4... May be you stolen some good hearts.. \",\"5... OMG!!\",\"6... Looks like you are good at flirting,Right?\",\"7.... Luck you are\",\"8... Chekmate...\",\"9... Really??\",\"Woww!!... 10\",\"Superb... 11\",\"Awesome.... 12\"]\n            var crushnorandomnumber = Math.floor((Math.random() * crushno.length-1) + 1);\n\n            const crushpercen = [\"78%\",\"80%\",\"100%\",\"99.99%\",\"85%\",\"91%\",\"88%\",\"100%\",\"Unmeasurable!!\",\"Sky is the limit for your love\"];\n            var crushpercenrandomnumber = Math.floor((Math.random() * crushpercen.length-1) + 1);\n\n            return (\n                <div>\n                    <h1></h1>\n                    <h3>Hello, {this.state.value}</h3><br/>\n                <table class=\"table table-striped table-dark\">\n                \n                <tbody>\n                <tr>\n                    <th scope=\"row\">Nick name:</th>\n                    <td>{nicknames[nickrandomnumber]}</td>\n                </tr>\n\n                <tr>\n                    <th scope=\"row\">Lucky Color:</th>\n                    <td style={textcolor}>{colors[colorrandomnumber]}</td>\n                </tr>\n                    \n                    <tr>\n                    <th scope=\"row\">Lucky Day:</th>\n                    <td>{days[dayrandomnumber]}</td>\n                    </tr>\n\n                <tr>\n                    <th scope=\"row\">Your crush name starts with:</th>\n                    <td>{crushnames[crushnamerandomnumber]}</td>\n                </tr>\n\n                <tr>\n                    <th scope=\"row\">May marry in:</th>\n                    <td>{marryin[marryinrandomnumber]}</td>\n                </tr>\n                <tr>\n                    <th scope=\"row\">No.of people have crush on you:</th>\n                    <td>{crushno[crushnorandomnumber]}</td>\n                </tr>\n                <tr>\n                    <th scope=\"row\">How much you love your Crush:</th>\n                    <td>{crushpercen[crushpercenrandomnumber]}</td>\n                </tr>\n                    \n                    \n                    \n                </tbody>\n                </table>\n                </div>\n                \n            );\n        }\n    }\n}\n\nReactDOM.render(\n    <FormInp />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}